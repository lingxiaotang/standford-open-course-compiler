/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;
nonterminal Feature dummy_feature;
nonterminal Formals formal_list;
nonterminal Formal aformal;
nonterminal formalc formal_content;
nonterminal Expressions expressions;
nonterminal Expressions expression_list;
nonterminal Expression expression; 
nonterminal let let_expr;    
nonterminal Cases cases;
nonterminal Case case;
nonterminal attr attribute;

precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE,LT,EQ;
precedence left MINUS,PLUS;
precedence left MULT,DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;
/* Precedence declarations go here. */


program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;
	
class_list
	/* single class */
	::= class:c
	    {: RESULT =(new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| CLASS TYPEID:i INHERITS error  SEMI
	| CLASS TYPEID:i1 error TYPEID:i2 LBRACE dummy_feature_list:f RBRACE SEMI
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
        | dummy_feature:f
            {: RESULT=(new Features(curr_lineno())).appendElement(f); :}
	| dummy_feature_list:fl dummy_feature:f
            {: RESULT=fl.appendElement(f); :}
        ;
/*deal with one feature*/
dummy_feature
        ::=attribute:a
	    {: RESULT=a; :}
	|  OBJECTID:o LPAREN formal_list:fl RPAREN COLON TYPEID:t LBRACE expression:e RBRACE SEMI
	    {: RESULT=new method(curr_lineno(),o,fl,t,e); :}
	|  error SEMI
        ;

/*deal with attribute*/
attribute
        ::=OBJECTID:o COLON TYPEID:t SEMI
	    {: RESULT=new attr(curr_lineno(),o,t,new no_expr(curr_lineno())); :}
	|  OBJECTID:o COLON TYPEID:t ASSIGN expression:e SEMI
	    {: RESULT=new attr(curr_lineno(),o,t,e); :}
        |  error SEMI
	;

/*deal with formal_list*/
formal_list
        ::=/*nothing*/
	    {: RESULT=new Formals(curr_lineno()); :}
	|   aformal:af
	    {: RESULT=new Formals(curr_lineno()).appendElement(af); :}
	|  formal_list:fl COMMA aformal:af
	    {: RESULT=fl.appendElement(af); :}
	;

/*deal with one particular formal*/
aformal
        ::= OBJECTID:o COLON TYPEID:t
	    {: RESULT=new formalc(curr_lineno(),o,t); :}
        ;

/*deal with expression_list(actually this is parameters in function)*/
expression_list
        ::=/*no expression*/
	    {: RESULT=new Expressions(curr_lineno()); :}
        |  expression_list:el COMMA expression:e
	    {: RESULT=el.appendElement(e); :}
	|  expression:e
	    {: RESULT=new Expressions(curr_lineno()).appendElement(e); :}
	;

/*deal with expressions(notice the differences between this and expresion_list),this is all expressions*/
expressions
        ::=expression:e SEMI
	    {: RESULT=new Expressions(curr_lineno()).appendElement(e); :}
	|  expressions:es expression:e SEMI
	    {: RESULT=es.appendElement(e); :}
        ;

/*deal with all_cases*/
cases
        ::=case:c
	   {: RESULT=new Cases(curr_lineno()).appendElement(c); :}
	|  cases:cs case:c
	   {: RESULT=cs.appendElement(c); :}
	;

/*deal with one particular branch*/
case
        ::=OBJECTID:o COLON TYPEID:t DARROW expression:e SEMI
	   {: RESULT=new branch(curr_lineno(),o,t,e); :}
	;

/*deal with let*/
let_expr
        ::=OBJECTID:o COLON TYPEID:t IN expression:e
	   {: RESULT=new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e); :}
	|  OBJECTID:o COLON TYPEID:t ASSIGN expression:e1 IN expression:e2
	   {: RESULT=new let(curr_lineno(),o,t,e1,e2); :}
        |  OBJECTID:o COLON TYPEID:t COMMA let_expr:le
	   {: RESULT=new let(curr_lineno(),o,t,new no_expr(curr_lineno()),le); :}
	|  OBJECTID:o COLON TYPEID:t ASSIGN expression:e COMMA let_expr:le
	   {: RESULT=new let(curr_lineno(),o,t,e,le); :}
	;


expression
    /*deal with assign expression*/
        ::=OBJECTID:o ASSIGN expression:e
	   {: RESULT=new assign(curr_lineno(),o,e); :}

    /*deal with static dispatch*/
	|  expression:e AT TYPEID:t DOT OBJECTID:o LPAREN expression_list:el RPAREN
	   {: RESULT=new static_dispatch(curr_lineno(),e,t,o,el); :}

    /*deal with dynamic dispatch*/
	|  expression:e DOT OBJECTID:o LPAREN expression_list:el RPAREN
	   {: RESULT=new dispatch(curr_lineno(),e,o,el); :}
	|  OBJECTID:o LPAREN expression_list:el RPAREN
	   {: RESULT=new dispatch(curr_lineno(),new object(curr_lineno(),AbstractTable.idtable.addString("self")),o,el); :}
        
    /*deal with if statement*/
    |  IF expression:e1 THEN expression:e2 ELSE expression:e3 FI
	   {: RESULT=new cond(curr_lineno(),e1,e2,e3); :}
	
    /*deal with while statement*/
    |  WHILE expression:e1 LOOP expression:e2 POOL
	   {: RESULT=new loop(curr_lineno(),e1,e2); :}
    |  WHILE expression:e1 LOOP expression:e2 error
	|  WHILE expression:e1 error expression:e2 POOL

    /*deal with block*/
	|  LBRACE expressions:e RBRACE
	   {: RESULT=new block(curr_lineno(),e); :}

    /*deal with let*/
	|  LET let_expr:le
	   {: RESULT=le; :}

    /*deal with case*/
	|  CASE expression:e OF cases:cs ESAC
	   {: RESULT=new typcase(curr_lineno(),e,cs); :}

    /*deal with new*/
	|  NEW TYPEID:type
	   {: RESULT=new new_(curr_lineno(),type); :}

    /*deal with isvoid*/
	|  ISVOID expression:e
	   {: RESULT=new isvoid(curr_lineno(),e); :}

    /*deal with plus*/
	|  expression:e1 PLUS expression:e2
	   {: RESULT=new plus(curr_lineno(),e1,e2); :}

    /*deal with minus*/
	|  expression:e1 MINUS  expression:e2
	   {: RESULT=new sub(curr_lineno(),e1,e2); :}

    /*deal with multiple*/
	|  expression:e1 MULT  expression:e2
	   {: RESULT=new mul(curr_lineno(),e1,e2); :}

    /*deal with divide*/
	|  expression:e1 DIV expression:e2
	   {: RESULT=new divide(curr_lineno(),e1,e2); :}

    /*deal with neg*/
	|  NEG expression:e
	   {: RESULT=new neg(curr_lineno(),e); :}
    
    /*deal with '<' */
	|  expression:e1 LT expression:e2
	   {: RESULT=new lt(curr_lineno(),e1,e2); :}
	
    /*deal with '<=' */
    |  expression:e1 LE expression:e2
	   {: RESULT=new leq(curr_lineno(),e1,e2); :}
	
    /*deal with '='*/
    |  expression:e1 EQ expression:e2
	   {: RESULT=new eq(curr_lineno(),e1,e2); :}

    /*deal with not*/
	|  NOT expression:e
	   {: RESULT=new comp(curr_lineno(),e); :}

    /*deal with ()*/
	|  LPAREN expression:e RPAREN
	   {: RESULT=e; :}

    /*deal with object*/
	|  OBJECTID:o
	   {: RESULT=new object(curr_lineno(),o); :}

    /*deal with int*/
	|  INT_CONST:i
	   {: RESULT=new int_const(curr_lineno(),i); :}

    /*deal with string*/
	|  STR_CONST:s 
	   {: RESULT=new string_const(curr_lineno(),s); :}

    /*deal with bool*/
	|  BOOL_CONST:i
	   {: RESULT=new bool_const(curr_lineno(),i);  :}
	|  error
	;
	 
	 




